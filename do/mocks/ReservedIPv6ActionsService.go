// Code generated by MockGen. DO NOT EDIT.
// Source: reserved_ipv6_actions.go
//
// Generated by this command:
//
//	mockgen -source reserved_ipv6_actions.go -package=mocks ReservedIPv6ActionsService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	do "github.com/digitalocean/doctl/do"
	gomock "go.uber.org/mock/gomock"
)

// MockReservedIPv6ActionsService is a mock of ReservedIPv6ActionsService interface.
type MockReservedIPv6ActionsService struct {
	ctrl     *gomock.Controller
	recorder *MockReservedIPv6ActionsServiceMockRecorder
}

// MockReservedIPv6ActionsServiceMockRecorder is the mock recorder for MockReservedIPv6ActionsService.
type MockReservedIPv6ActionsServiceMockRecorder struct {
	mock *MockReservedIPv6ActionsService
}

// NewMockReservedIPv6ActionsService creates a new mock instance.
func NewMockReservedIPv6ActionsService(ctrl *gomock.Controller) *MockReservedIPv6ActionsService {
	mock := &MockReservedIPv6ActionsService{ctrl: ctrl}
	mock.recorder = &MockReservedIPv6ActionsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReservedIPv6ActionsService) EXPECT() *MockReservedIPv6ActionsServiceMockRecorder {
	return m.recorder
}

// Assign mocks base method.
func (m *MockReservedIPv6ActionsService) Assign(ip string, dropletID int) (*do.Action, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Assign", ip, dropletID)
	ret0, _ := ret[0].(*do.Action)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Assign indicates an expected call of Assign.
func (mr *MockReservedIPv6ActionsServiceMockRecorder) Assign(ip, dropletID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Assign", reflect.TypeOf((*MockReservedIPv6ActionsService)(nil).Assign), ip, dropletID)
}

// Unassign mocks base method.
func (m *MockReservedIPv6ActionsService) Unassign(ip string) (*do.Action, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unassign", ip)
	ret0, _ := ret[0].(*do.Action)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unassign indicates an expected call of Unassign.
func (mr *MockReservedIPv6ActionsServiceMockRecorder) Unassign(ip any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unassign", reflect.TypeOf((*MockReservedIPv6ActionsService)(nil).Unassign), ip)
}
